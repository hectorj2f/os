package:
  name: kibana-8
  version: 8.16.1
  epoch: 3
  description: Your window into the Elastic Stack
  copyright:
    - license: Apache-2.0
    - license: BSD-3-Clause
    - license: Elastic-2.0
    - license: ISC
    - license: MIT
  resources:
    cpu: 42 # max is 48 for arm64
    memory: 128Gi
  dependencies:
    provides:
      - kibana=${{package.full-version}}

# this will be resolved to 8 only
var-transforms:
  - from: ${{package.version}}
    match: ^(\d+)\.\d+\.\d+$
    replace: "$1"
    to: major-version

environment:
  contents:
    packages:
      - bash
      - build-base
      - busybox
      - ca-certificates-bundle
      - coreutils
      - jq
      - node-gyp
      - nvm
      - python3
      - wget
      - yarn
      - yq

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/elastic/kibana
      tag: v${{package.version}}
      expected-commit: c8b46e87c4d61de4fe046ce5ea0a0b68aad5acf9

  - uses: patch
    with:
      patches: GHSA-3xgq-45jj-v275.patch

  - uses: patch
    with:
      patches: GHSA-hc5w-c9f8-9cc4-fix-langchain.patch

  - runs: |
      # find kibana's pinned node version, download it, use it to bootstrap
      # it will run bazel and then vendor a copy.
      node_version=$(jq -r .engines.node package.json)
      arch="x64"
      if [ $(uname -m) != "x86_64" ]; then
        arch="arm64"
      fi
      node_filename="node-v${node_version}-linux-${arch}.tar.xz"
      node_sha256sum=$(egrep -o "linux-${arch}.+[a-z0-9]{32}" WORKSPACE.bazel |awk -F '"' '{print $NF}')
      node_url="https://us-central1-elastic-kibana-184716.cloudfunctions.net/kibana-ci-proxy-cache/dist/v${node_version}/${node_filename}"
      wget $node_url
      our_sha256sum=$(sha256sum $node_filename |awk '{print $1}')
      if [ $our_sha256sum != $node_sha256sum ]; then
        echo "mismatched sha256sums: ours=$our_sha256sum theirs=$node_sha256sum"
        exit 1
      fi
      unxz $node_filename
      tar xf $(basename -s .xz $node_filename) -C /usr --strip-components=1

  - runs: |
      bash -c '\
      source /usr/share/nvm/nvm.sh
      nvm install $(cat .nvmrc)
      nvm use $(cat .nvmrc)
      yarn install --force-install
      yarn kbn bootstrap --allow-root

      # builds fail in x86_64 CI without upping bazels available memory
      echo "startup --host_jvm_args=-Xmx128g" >> ~/.bazelrc
      NODE_OPTIONS="--huge-max-old-generation-size --max_old_space_size=65536" node --max_old_space_size=65536 --no-memory-reducer --no-compact --predictable --use-largepages=on --gc-global --gc-interval=100 scripts/build --release --skip-os-packages --skip-canvas-shareable-runtime --skip-docker-ubi --skip-docker-ubuntu --skip-docker-fips'

  - runs: |
      mkdir -p "${{targets.destdir}}"/usr/share/kibana
      tar xf target/kibana-${{package.version}}-linux-*.tar.gz -C ${{targets.destdir}}/usr/share/kibana --strip-components=1

  - uses: strip

subpackages:
  - name: ${{package.name}}-bitnami
    description: Your window into the Elastic Stack
    dependencies:
      provides:
        - kibana-bitnami=${{package.full-version}}
      runtime:
        - bash
        - yq
        - busybox
        - coreutils
    pipeline:
      - uses: bitnami/compat
        with:
          image: kibana
          version-path: ${{vars.major-version}}/debian-12
      - runs: |
          # copied from https://github.com/bitnami/containers/blob/main/bitnami/kibana/8/debian-12/rootfs/opt/bitnami/scripts/kibana-env.sh#L79-L109
          mkdir -p ${{targets.contextdir}}/opt/bitnami/kibana
          mkdir -p ${{targets.contextdir}}/opt/bitnami/kibana/config/certs
          mkdir -p ${{targets.contextdir}}/opt/bitnami/kibana/config/certs/server
          mkdir -p ${{targets.contextdir}}/opt/bitnami/kibana/config/certs/elasticsearch/
          mkdir -p ${{targets.contextdir}}/opt/bitnami/kibana/config.default
          mkdir -p ${{targets.contextdir}}/opt/bitnami/kibana/tmp
          mkdir -p ${{targets.contextdir}}/opt/bitnami/kibana/plugins.default
          mkdir -p ${{targets.contextdir}}/bitnami/kibana/data
          mkdir -p ${{targets.contextdir}}/bitnami/kibana/conf
          mkdir -p ${{targets.contextdir}}/docker-entrypoint-initdb.d

          # I agree with RJ this is absolutely awful but it is what it is
          cp -r ${{targets.destdir}}/usr/share/kibana/* ${{targets.subpkgdir}}/opt/bitnami/kibana

          # install necessary config
          install -m644 config/kibana.yml ${{targets.contextdir}}/opt/bitnami/kibana/config/kibana.yml
          cp -r config/* ${{targets.contextdir}}/opt/bitnami/kibana/config.default

          # sed all the scripts to use absolute path in the build environment
          find . -iname "*.sh" -exec sed 's#/opt/bitnami#${{targets.contextdir}}/opt/bitnami#g' -i {} \;

          # this script does some magic with env vars, templates, etc. etc.
          # it is easier to run it than figure out everything that it touches

          ${{targets.contextdir}}/opt/bitnami/scripts/kibana/postunpack.sh

          # un-sed everything back to absolute /opt/bitnami prefix
          find ${{targets.contextdir}}/opt/bitnami -type f -exec sed 's#${{targets.contextdir}}##g' -i {} \;

          # Symlink binaries to path
          mkdir -p ${{targets.contextdir}}/usr/bin
          for i in ${{targets.contextdir}}/opt/bitnami/kibana/bin/*; do
            name=$(basename $i)
            ln -sf /opt/bitnami/kibana/bin/$name ${{targets.contextdir}}/usr/bin/$name
          done

update:
  enabled: true
  github:
    identifier: elastic/kibana
    strip-prefix: v

test:
  environment:
    contents:
      packages:
        - jq
  pipeline:
    - runs: |
        export HOME=/usr/share/kibana
        cd $HOME
        ./node/glibc-217/bin/node src/cli/dist.js |head -n 1 |jq -r .config.serviceVersion.value |grep ${{package.version}}
