diff --git a/cmd/tempo/main.go b/cmd/tempo/main.go
index f0e99d679..b968bff2f 100644
--- a/cmd/tempo/main.go
+++ b/cmd/tempo/main.go
@@ -4,12 +4,6 @@ import (
 	"context"
 	"flag"
 	"fmt"
-	"io"
-	"os"
-	"reflect"
-	"runtime"
-	"time"
-
 	"github.com/drone/envsubst"
 	"github.com/go-kit/log/level"
 	"github.com/grafana/dskit/flagext"
@@ -18,6 +12,7 @@ import (
 	"github.com/grafana/dskit/tracing"
 	ot "github.com/opentracing/opentracing-go"
 	"github.com/prometheus/client_golang/prometheus"
+	ver "github.com/prometheus/client_golang/prometheus/collectors/version"
 	"github.com/prometheus/common/version"
 	"go.opentelemetry.io/otel"
 	oc_bridge "go.opentelemetry.io/otel/bridge/opencensus"
@@ -29,6 +24,11 @@ import (
 	semconv "go.opentelemetry.io/otel/semconv/v1.25.0"
 	"google.golang.org/grpc/encoding"
 	"gopkg.in/yaml.v2"
+	"io"
+	"os"
+	"reflect"
+	"runtime"
+	"time"
 
 	"github.com/grafana/tempo/cmd/tempo/app"
 	"github.com/grafana/tempo/cmd/tempo/build"
@@ -49,7 +49,7 @@ func init() {
 	version.Version = Version
 	version.Branch = Branch
 	version.Revision = Revision
-	prometheus.MustRegister(version.NewCollector(appName))
+	prometheus.MustRegister(ver.NewCollector(appName))
 
 	// Register the gogocodec as early as possible.
 	encoding.RegisterCodec(gogocodec.NewCodec())
diff --git a/integration/e2e/receivers_test.go b/integration/e2e/receivers_test.go
index 712cc7346..9cb809268 100644
--- a/integration/e2e/receivers_test.go
+++ b/integration/e2e/receivers_test.go
@@ -55,7 +55,7 @@ func TestReceivers(t *testing.T) {
 				otlpCfg := exporterCfg.(*otlpexporter.Config)
 				otlpCfg.ClientConfig = configgrpc.ClientConfig{
 					Endpoint: endpoint,
-					TLSSetting: configtls.TLSClientSetting{
+					TLSSetting: configtls.ClientConfig{
 						Insecure: true,
 					},
 				}
@@ -71,7 +71,7 @@ func TestReceivers(t *testing.T) {
 				zipkinCfg := exporterCfg.(*zipkinexporter.Config)
 				zipkinCfg.ClientConfig = confighttp.ClientConfig{
 					Endpoint: endpoint,
-					TLSSetting: configtls.TLSClientSetting{
+					TLSSetting: configtls.ClientConfig{
 						Insecure: true,
 					},
 				}
diff --git a/integration/util.go b/integration/util.go
index a8b988584..1f01d729e 100644
--- a/integration/util.go
+++ b/integration/util.go
@@ -287,7 +287,7 @@ func NewOtelGRPCExporter(endpoint string) (exporter.Traces, error) {
 	otlpCfg := exporterCfg.(*otlpexporter.Config)
 	otlpCfg.ClientConfig = configgrpc.ClientConfig{
 		Endpoint: endpoint,
-		TLSSetting: configtls.TLSClientSetting{
+		TLSSetting: configtls.ClientConfig{
 			Insecure: true,
 		},
 	}
diff --git a/modules/distributor/receiver/shim.go b/modules/distributor/receiver/shim.go
index fe3c3ae02..632422067 100644
--- a/modules/distributor/receiver/shim.go
+++ b/modules/distributor/receiver/shim.go
@@ -191,12 +191,10 @@ func New(receiverCfg map[string]interface{}, pusher TracesPusher, middleware Mid
 		receivers = append(receivers, k)
 	}
 
-	// Creates a config provider with the given config map.
-	// The provider will be used to retrieve the actual config for the pipeline (although we only need the receivers).
-	pro, err := otelcol.NewConfigProvider(otelcol.ConfigProviderSettings{
-		ResolverSettings: confmap.ResolverSettings{
-			URIs: []string{"mock:/"},
-			Providers: map[string]confmap.Provider{"mock": &mapProvider{raw: map[string]interface{}{
+	// Define a factory function to create the mock provider
+	mockProviderFactory := confmap.NewProviderFactory(func(settings confmap.ProviderSettings) confmap.Provider {
+		return &mapProvider{
+			raw: map[string]interface{}{
 				"receivers": receiverCfg,
 				"exporters": map[string]interface{}{
 					"nop": map[string]interface{}{},
@@ -209,7 +207,19 @@ func New(receiverCfg map[string]interface{}, pusher TracesPusher, middleware Mid
 						},
 					},
 				},
-			}}},
+			},
+		}
+	})
+
+	// Creates a config provider with the given config map.
+	// The provider will be used to retrieve the actual config for the pipeline (although we only need the receivers).
+	pro, err := otelcol.NewConfigProvider(otelcol.ConfigProviderSettings{
+		ResolverSettings: confmap.ResolverSettings{
+			URIs: []string{"mock:/"},
+			ProviderFactories: []confmap.ProviderFactory{
+				mockProviderFactory,
+			},
+			DefaultScheme: "mock",
 		},
 	})
 	if err != nil {
